//Funciones y Generics

// FUNCIONES -> En Typescript las funciones pueden ser fuertemente tipadas, podemos definir tipos en los parametros
// y el tipo de retorno de la funcion

// Definir tipos en funciones
function sumar(a: number, b: number): number {
  return a + b;
}
console.log(sumar(3, 5));

// Par√°metros opcionales y valores por defecto

function saludar(nombre: string, saludo: string = "Hola"): string {
  return `${saludo} ${nombre}`;
}

console.log(saludar("Carolina"));
console.log(saludar("Buenos los d√≠as"));

// Funciones con par√°metros opcionales || texto? ‚Üí Significa que el par√°metro es opcional.
function obtenerLongitud(texto?: string): number {
  return texto ? texto.length : 0;
}
console.log(obtenerLongitud()); // "typescript"

// Funciones con tipos de retorno void y never

function mostrarMensaje(mensaje: string): void {
  console.log(mensaje);
  //mostrarMensaje() solo ejecuta console.log() y no devuelve nada.
}

function lanzarError(mensaje: string): never {
  throw new Error(mensaje);
  //lanzarError() nunca devuelve nada porque la ejecuci√≥n se detiene al lanzar una excepci√≥n.
}

//Gen√©ricos (Generics) en TypeScript
/*
Los gen√©ricos permiten que nuestras funciones, clases e interfaces trabajen con cualquier tipo de dato, 
manteniendo el tipado fuerte. Son √∫tiles cuando queremos que una funci√≥n o clase sea reutilizable para distintos tipos.
 */

// Ejemplo SIN genericos --> La function solo permite un tipo de dato que es un numero
function duplicarNumero(num: number): number {
  return num * 2;
}

// Ejemplo CON genericos --> Los gen√©ricos permiten definir un tipo variable que se adapta seg√∫n el contexto:
// <T> ‚Üí Define un tipo gen√©rico T (puede ser cualquier tipo).
function duplicar<T>(data: T): T {
  // dato: T ‚Üí El par√°metro dato es de tipo T.
  return data; // : T ‚Üí La funci√≥n devuelve el mismo tipo T.
}
// Podemos hacer que una funci√≥n acepte arrays de cualquier tipo:
// T[] ‚Üí Indica que array es un arreglo de cualquier tipo.
// obtenerPrimerElemento([1, 2, 3]) ‚Üí TypeScript infiere T = number.
// obtenerPrimerElemento(["a", "b", "c"]) ‚Üí T = string.
function obtenerCualquierElemento<T>(arr: T[]): T {
  return arr[0];
}

// Restringir tipos <T> con extends
// Podemos restringir los tipos permitidos en T usando extends:
// T extends { nombre: string } ‚Üí T debe ser un objeto con una propiedad nombre.
function obtenerPropiedad<T extends { name: string }>(obj: T): string {
  return `El nombre de la persona es ${obj.name}`;
}
// ObtenerPropiedad(persona) funciona porque persona tiene nombre.
const person = { name: "Carolina", age: 30, email: "caro@email.com" };

// console.log(obtenerPropiedad({ edad: 30 })); ‚ùå Error: No tiene la propiedad 'nombre'

// Ejercicio Pr√°ctico
// Implementa una funci√≥n gen√©rica filtrarPorPropiedad que reciba:
// array de obj - nombre de la propiedad - el valor de la propiedad

function filtrarPorPropiedad<T extends object, K extends keyof T>(
  arr: T[],
  prop: K,
  value: T[K]
): T[] {
  return arr.filter((obj) => obj[prop] === value);
}

const usuarios = [
  { nombre: "Ana", edad: 25 },
  { nombre: "Carlos", edad: 30 },
  { nombre: "Pedro", edad: 25 },
];

console.log(filtrarPorPropiedad(usuarios, "edad", 25));
// ‚úÖ [{ nombre: "Ana", edad: 25 }, { nombre: "Pedro", edad: 25 }]

// Eplicaci√≥n:
/*
K extends keyof T ‚Üí K debe ser una clave v√°lida de T (ej: "edad")
array.filter(obj => obj[propiedad] === valor) ‚Üí Filtra los objetos que coincidan con el valor.
*/

 // üìå Conclusi√≥n
 // ‚úÖ Funciones tipadas evitan errores en tiempo de ejecuci√≥n.
 // ‚úÖ Gen√©ricos (<T>) hacen el c√≥digo flexible y reutilizable.
 // ‚úÖ Extender tipos (extends) restringe los gen√©ricos cuando es necesario.